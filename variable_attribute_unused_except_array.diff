diff --git a/src/ArrayVariable.cpp b/src/ArrayVariable.cpp
index 9d934b2..fa5d409 100644
--- a/src/ArrayVariable.cpp
+++ b/src/ArrayVariable.cpp
@@ -184,6 +184,7 @@ ArrayVariable::CreateArrayVariable(const CGContext& cg_context, Block* blk, cons
 
 	// add it to global list or local variable list
 	blk? blk->local_vars.push_back(var) : VariableSelector::GetGlobalVariables()->push_back(var);
+
 	return var;
 }
 
diff --git a/src/CGOptions.cpp b/src/CGOptions.cpp
index 2c67b14..90afe33 100644
--- a/src/CGOptions.cpp
+++ b/src/CGOptions.cpp
@@ -209,6 +209,7 @@ DEFINE_GETTER_SETTER_BOOL(computed_goto);
 DEFINE_GETTER_SETTER_BOOL(tm_relaxed);
 
 DEFINE_GETTER_SETTER_BOOL(type_of);
+DEFINE_GETTER_SETTER_BOOL(variable_attribute_unused);
 
 void
 CGOptions::set_default_builtin_kinds()
@@ -321,6 +322,7 @@ CGOptions::set_default_settings(void)
 	const_struct_union_fields(true);
 	Int128(false);
 	UInt128(false);
+	variable_attribute_unused(false);
 
 	addr_taken_of_locals(true);
 	lang_cpp(false);
diff --git a/src/CGOptions.h b/src/CGOptions.h
index 5d93e60..75ad999 100644
--- a/src/CGOptions.h
+++ b/src/CGOptions.h
@@ -259,6 +259,9 @@ public:
 	static bool Int128(void);
         static bool Int128(bool p);
 
+	static bool variable_attribute_unused(void);
+        static bool variable_attribute_unused(bool p);
+
 	static bool double_enable(void);
 	static bool double_enable(bool p);
 
@@ -577,6 +580,7 @@ private:
 	static bool	uint8_;
 	static bool     Int128_;
         static bool     UInt128_;
+	static bool	variable_attribute_unused_;
 	static bool	double_enable_;
 	static bool	enable_float_;
 	static bool	strict_float_;
diff --git a/src/RandomProgramGenerator.cpp b/src/RandomProgramGenerator.cpp
index b65a818..d083233 100644
--- a/src/RandomProgramGenerator.cpp
+++ b/src/RandomProgramGenerator.cpp
@@ -185,6 +185,7 @@ static void print_help()
 	cout << "  --int128 | --no-int128: enable | disable generate__int128 as datatype extension (disabled by default)." << endl << endl;
         cout << "  --uint128 | --no-uint128: enable | disable generate unsigned __int128 as datatype extension (disabled by default)." << endl << endl;
 	cout << "  --double | --no-double: enable | disable generate double as data type extension (disabled by default)." << endl << endl;
+	cout << "  --variable-attribute-unused | --no-variable-attribute-unused: enable | disable generate variable attribute unused (disabled by default)." << endl << endl;
 	// numbered controls
 	cout << "  --max-array-dim <num>: limit array dimensions to <num>. (default 3)" << endl << endl;
 	cout << "  --max-array-len-per-dim <num>: limit array length per dimension to <num> (default 10)." << endl << endl;
@@ -837,6 +838,17 @@ main(int argc, char **argv)
 			continue;
 		}
 
+		if (strcmp (argv[i], "--variable-attribute-unused") == 0) {
+                        CGOptions::variable_attribute_unused(true);
+                        continue;
+                }
+
+                if (strcmp (argv[i], "--no-variable-attribute-unused") == 0) {
+                        CGOptions::variable_attribute_unused(false);
+                        continue;
+                }
+
+
 		if (strcmp (argv[i], "--int128") == 0) {
                         CGOptions::Int128(true);
                         continue;
diff --git a/src/Variable.cpp b/src/Variable.cpp
index 871ea01..959175c 100644
--- a/src/Variable.cpp
+++ b/src/Variable.cpp
@@ -435,6 +435,7 @@ Variable::Variable(const std::string &name, const Type *type,
 	  field_var_of(isFieldVarOf), isArray(false),
 	  qfer(isConsts, isVolatiles)
 {
+	var_attri_unused = false;
 	// nothing else to do
 	is_typeof=false;
 }
@@ -450,6 +451,7 @@ Variable::Variable(const std::string &name, const Type *type, const Expression*
 	  field_var_of(0), isArray(false),
 	  qfer(*qfer)
 {
+	var_attri_unused = false;
 	// nothing else to do
 }
 
@@ -462,6 +464,7 @@ Variable::Variable(const std::string &name, const Type *type, const Expression*
 	  isArray(isArray),
 	  qfer(*qfer)
 {
+	var_attri_unused = false;
 	// nothing else to do
 	is_typeof=false;
 }
@@ -679,7 +682,11 @@ Variable::OutputDef(std::ostream &out, int indent) const
 	}
 	output_qualified_type(out);
 
-	out << get_actual_name() << " = ";
+	out << get_actual_name();
+        if (var_attri_unused)
+                out << " __attribute__((unused))";
+        out << " = ";
+
 	assert(init);
 	init->Output(out);
 	out << ";";
diff --git a/src/Variable.h b/src/Variable.h
index 91b18d2..c3389f5 100644
--- a/src/Variable.h
+++ b/src/Variable.h
@@ -163,6 +163,7 @@ public:
 	bool is_typeof= false;
 	bool is_typeof_used_param = false;
 	bool is_typeof_used_local = false;
+	bool var_attri_unused;
 private:
 	Variable(const std::string &name, const Type *type, const Expression* init, const CVQualifiers* qfer);
 	Variable(const std::string &name, const Type *type, const Expression* init, const CVQualifiers* qfer, const Variable* isFieldVarOf, bool isArray);
diff --git a/src/VariableSelector.cpp b/src/VariableSelector.cpp
index 5349f1e..416e927 100644
--- a/src/VariableSelector.cpp
+++ b/src/VariableSelector.cpp
@@ -517,6 +517,7 @@ VariableSelector::create_and_initialize(Effect::Access access, const CGContext &
 		var = new_variable(name, t, init, qfer);
 	}
 	assert(var);
+
 	return var;
 }
 
@@ -552,6 +553,17 @@ VariableSelector::GenerateNewGlobal(Effect::Access access, const CGContext &cg_c
 		GlobalNonvolatilesList.push_back(var);
 	}
 	var_created = true;
+
+	int prob = 0;
+	if(CGOptions::variable_attribute_unused()){
+		prob = rnd_flipcoin(70);
+	}
+	else
+		prob = 0;
+
+	if(prob)
+		var->var_attri_unused = true;
+
 	return var;
 
 }
@@ -581,6 +593,17 @@ VariableSelector::GenerateNewNonArrayGlobal(Effect::Access access, const CGConte
 		GlobalNonvolatilesList.push_back(var);
 	}
 	var_created = true;
+
+	int prob = 0;
+        if(CGOptions::variable_attribute_unused()){
+                prob = rnd_flipcoin(70);
+        }
+        else
+                prob = 0;
+
+        if(prob)
+                var->var_attri_unused = true;
+
 	return var;
 }
 
@@ -923,6 +946,17 @@ VariableSelector::GenerateNewParentLocal(Block &block,
 	FactMgr* fm = get_fact_mgr(&cg_context);
 	fm->add_new_var_fact_and_update_inout_maps(blk, var->get_collective());
 	var_created = true;
+
+	int prob = 0;
+        if(CGOptions::variable_attribute_unused()){
+                prob = rnd_flipcoin(70);
+        }
+        else
+                prob = 0;
+
+        if(prob)
+                var->var_attri_unused = true;
+
 	return var;
 }
 
