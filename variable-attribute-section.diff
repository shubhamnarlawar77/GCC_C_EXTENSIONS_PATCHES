diff --git a/src/CGOptions.cpp b/src/CGOptions.cpp
index 2c67b14..04482f9 100644
--- a/src/CGOptions.cpp
+++ b/src/CGOptions.cpp
@@ -135,6 +135,7 @@ DEFINE_GETTER_SETTER_STRING_REF(delta_input)
 DEFINE_GETTER_SETTER_BOOL(no_delta_reduction)
 DEFINE_GETTER_SETTER_BOOL(math64)
 DEFINE_GETTER_SETTER_BOOL(inline_function)
+DEFINE_GETTER_SETTER_BOOL(variable_attribute_section)
 DEFINE_GETTER_SETTER_BOOL(stmt_expr)
 DEFINE_GETTER_SETTER_BOOL(math_notmp)
 DEFINE_GETTER_SETTER_BOOL(longlong)
@@ -267,6 +268,7 @@ CGOptions::set_default_settings(void)
 	math64(true);
 	inline_function(false);
 	stmt_expr(false);
+	variable_attribute_section(false);
 	math_notmp(false);
 	longlong(true);
 	int8(true);
diff --git a/src/CGOptions.h b/src/CGOptions.h
index 5d93e60..204d912 100644
--- a/src/CGOptions.h
+++ b/src/CGOptions.h
@@ -244,6 +244,10 @@ public:
 	static bool inline_function(void);
 	static bool inline_function(bool p);
 
+	static bool variable_attribute_section(void);
+        static bool variable_attribute_section(bool p);
+
+
 	static bool stmt_expr(void);
 	static bool stmt_expr(bool p);
 
@@ -575,6 +579,7 @@ private:
 	static bool	longlong_;
 	static bool	int8_;
 	static bool	uint8_;
+	static bool	variable_attribute_section_;
 	static bool     Int128_;
         static bool     UInt128_;
 	static bool	double_enable_;
diff --git a/src/Probabilities.cpp b/src/Probabilities.cpp
index 3b83866..5ab4653 100644
--- a/src/Probabilities.cpp
+++ b/src/Probabilities.cpp
@@ -486,6 +486,9 @@ Probabilities::set_single_name_maps()
 	// for choosing a builtin function
 	set_single_name("builtin_function_prob", pBuiltinFunctionProb);
 
+	// for choosing variable attributes section
+	set_single_name("variable_attributes_section_prob", pVariableAttriSection);
+
         //////////////////////////////////////////////////////////////////
 	// group for statement
 	set_single_name("statement_prob", pStatementProb);
@@ -600,6 +603,7 @@ Probabilities::initialize_single_probs()
 	m[pAccessOnceVariableProb] = 20;
 	m[pInlineFunctionProb] = CGOptions::inline_function_prob();
 	m[pBuiltinFunctionProb] = CGOptions::builtin_function_prob();
+	m[pVariableAttriSection] = 90;
 
 	std::map<ProbName, int>::iterator i;
 	for (i = m.begin(); i != m.end(); ++i) {
diff --git a/src/Probabilities.h b/src/Probabilities.h
index 63bbca8..47db785 100644
--- a/src/Probabilities.h
+++ b/src/Probabilities.h
@@ -65,6 +65,7 @@ enum ProbName {
 	pAccessOnceVariableProb,
 	pInlineFunctionProb,
 	pBuiltinFunctionProb,
+	pVariableAttriSection,
 
 	// group for statement
 	pStatementProb,
@@ -226,6 +227,9 @@ enum ProbName {
 #define BuiltinFunctionProb \
 	Probabilities::get_prob(pBuiltinFunctionProb)
 
+#define VariableAttriSectionProb \
+	Probabilities::get_prob(pVariableAttriSection)
+
 //////////////////////////////////////////////////
 #define UNARY_OPS_PROB_FILTER \
 	Probabilities::get_prob_filter(pUnaryOpsProb)
diff --git a/src/RandomProgramGenerator.cpp b/src/RandomProgramGenerator.cpp
index b65a818..057a855 100644
--- a/src/RandomProgramGenerator.cpp
+++ b/src/RandomProgramGenerator.cpp
@@ -177,10 +177,11 @@ static void print_help()
 	cout << "  --inline-function | --no-inline-function: enable | disable inline attributes on generated functions." << endl << endl;
 	cout << "  --inline-function-prob <num>: set the probability of each function being marked as inline (default is 50)." << endl << endl;
 
-	//extensions 
+	//extensions
 	cout << "  --computed-goto | --no-computed-goto: enable | disable computed goto extension (disable by default)." << endl << endl;
 	cout << "  --tm-relaxed | --no-tm-relaxed : enable | disable transactional memory __transaction_relaxed extension (disable by default)." << endl << endl;
 	cout << "  --stmt_expr | --no-stmt_expr: enable | disable statement-expression extension. (disable by default)" << endl << endl;
+	cout << "  --variable-attribute-section | --no-variable-attribute-section: enable | disable variable attribute section extension. (disable by default)" << endl << endl;
 	cout << "  --typeof | --no-typeof : enable | disable typeof for replacing datatype (disable by default)." << endl << endl;
 	cout << "  --int128 | --no-int128: enable | disable generate__int128 as datatype extension (disabled by default)." << endl << endl;
         cout << "  --uint128 | --no-uint128: enable | disable generate unsigned __int128 as datatype extension (disabled by default)." << endl << endl;
@@ -797,6 +798,17 @@ main(int argc, char **argv)
 			continue;
 		}
 
+		if (strcmp (argv[i], "--variable-attribute-section") == 0) {
+                        CGOptions::variable_attribute_section(true);
+                        continue;
+                }
+
+                if (strcmp (argv[i], "--no-variable-attribute-section") == 0) {
+                        CGOptions::variable_attribute_section(false);
+                        continue;
+                }
+
+
 		if (strcmp (argv[i], "--longlong") == 0) {
 			CGOptions::longlong(true);
 			continue;
diff --git a/src/Variable.cpp b/src/Variable.cpp
index 871ea01..e2f8b8a 100644
--- a/src/Variable.cpp
+++ b/src/Variable.cpp
@@ -435,6 +435,7 @@ Variable::Variable(const std::string &name, const Type *type,
 	  field_var_of(isFieldVarOf), isArray(false),
 	  qfer(isConsts, isVolatiles)
 {
+	var_attri_section = false;
 	// nothing else to do
 	is_typeof=false;
 }
@@ -450,6 +451,7 @@ Variable::Variable(const std::string &name, const Type *type, const Expression*
 	  field_var_of(0), isArray(false),
 	  qfer(*qfer)
 {
+	var_attri_section = false;
 	// nothing else to do
 }
 
@@ -462,6 +464,7 @@ Variable::Variable(const std::string &name, const Type *type, const Expression*
 	  isArray(isArray),
 	  qfer(*qfer)
 {
+	var_attri_section = false;
 	// nothing else to do
 	is_typeof=false;
 }
@@ -679,7 +682,13 @@ Variable::OutputDef(std::ostream &out, int indent) const
 	}
 	output_qualified_type(out);
 
-	out << get_actual_name() << " = ";
+	out << get_actual_name();
+        static int i;
+        if (var_attri_section){
+                out << " __attribute__((section(\"usersection";
+                out << i++ << "\")))";
+        }
+        out << " = ";
 	assert(init);
 	init->Output(out);
 	out << ";";
diff --git a/src/Variable.h b/src/Variable.h
index 91b18d2..6b80448 100644
--- a/src/Variable.h
+++ b/src/Variable.h
@@ -157,6 +157,7 @@ public:
 	const CVQualifiers qfer;
 	static std::vector<const Variable*> &get_new_ctrl_vars();
 	static std::vector<const Variable*> &get_last_ctrl_vars();
+	bool var_attri_section;
 
 	static const char sink_var_name[];
 //changehere
diff --git a/src/VariableSelector.cpp b/src/VariableSelector.cpp
index 5349f1e..26be65e 100644
--- a/src/VariableSelector.cpp
+++ b/src/VariableSelector.cpp
@@ -552,6 +552,10 @@ VariableSelector::GenerateNewGlobal(Effect::Access access, const CGContext &cg_c
 		GlobalNonvolatilesList.push_back(var);
 	}
 	var_created = true;
+	if (CGOptions::variable_attribute_section()){
+                if (rnd_flipcoin(VariableAttriSectionProb))
+                        var->var_attri_section = true;
+        }
 	return var;
 
 }
@@ -581,6 +585,10 @@ VariableSelector::GenerateNewNonArrayGlobal(Effect::Access access, const CGConte
 		GlobalNonvolatilesList.push_back(var);
 	}
 	var_created = true;
+	if (CGOptions::variable_attribute_section()){
+		if (rnd_flipcoin(VariableAttriSectionProb))
+			var->var_attri_section = true;
+	}
 	return var;
 }
 
